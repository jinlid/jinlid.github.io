package main

import (
	"database/sql"
	"fmt"
	"os"
	"strconv"
	"sync"

	_ "github.com/lib/pq" // 导入驱动
)

const (
	maxGoroutines = 100 // 限制并发 goroutine 数量
)

var wg sync.WaitGroup

func main() {
	// 检查命令行参数
	if len(os.Args) < 2 {
		fmt.Println("Usage: go run main.go <task_count>")
		return
	}

	// 解析命令行参数
	taskCount, err := strconv.Atoi(os.Args[1])
	if err != nil {
		fmt.Printf("Invalid task count: %v\n", err)
		return
	}
	dbInfo := fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=disable",
		"127.0.0.1", 5432, "postgres", "123456", "postgres")
	db, err := sql.Open("postgres", dbInfo)
	if err != nil {
		panic(err)
	}
	defer db.Close()

	// 设置连接池
	db.SetMaxOpenConns(20) // 根据数据库性能调整
	db.SetMaxIdleConns(10)

	// 创建任务通道
	taskChan := make(chan int, maxGoroutines)

	// 启动 worker
	for i := 0; i < maxGoroutines; i++ {
		go worker(db, taskChan)
	}

	// 分发任务
	for i := 1; i <= taskCount; i++ {
		wg.Add(1)
		taskChan <- i
	}

	// 等待所有任务完成
	wg.Wait()
	close(taskChan)
	fmt.Println("\nData scan completed.")
}

func worker(db *sql.DB, taskChan <-chan int) {
	for range taskChan {
		rows, err := db.Query("select txid_current()")
		if err != nil {
			fmt.Printf("Query error: %v\n", err)
			wg.Done()
			continue
		}
		rows.Close() // 及时关闭结果集
		wg.Done()
	}
}
